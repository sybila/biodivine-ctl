buildscript {
    ext.kotlin_version = '1.0.5'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'com.madvay.tools.build.gitbuildinfo' version '0.1.5-alpha'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'application'
apply plugin: 'com.madvay.tools.build.gitbuildinfo'

sourceCompatibility = 1.7
group = "com.github.sybila"
archivesBaseName = "ctl-biodivine"
version = '0.3.0'

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

configurations.all {    //refresh snapshots on every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.intellij:annotations:5.1'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.yaml:snakeyaml:1.17'
    compile 'com.google.code.gson:gson:2.6.2'
    //ODE and CTL modules do not propagate this dependency, because it's part of the plugin
    compile 'org.antlr:antlr4-runtime:4.6'
    //BioDivine modules. We list all, since that will override possible old version in transitive dependencies
    compile 'com.github.sybila:ode-generator:1.0.4'
    compile 'com.github.sybila:ctl-model-checker:2.0.0'
    compile 'com.github.daemontus:jafra:1.0.8'
    compile 'com.github.sybila:ctl-parser:2.2.2'
    compile files('libs/mpj.jar')
    compile files('libs/com.microsoft.z3.jar')
}

//Specify main class
jar {
    manifest {
        attributes  'Implementation-Title': 'Biodivine',
                'Implementation-Version': version,
                'Main-Class': 'com.github.sybila.biodivine.StarterKt'
    }
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    test.java.srcDirs += 'src/test/kotlin'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

jacoco {
    toolVersion = "0.7.5.201505241946"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

buildStamp {
    // The git commit SHA will be appended to this url to generate the final url.
    repoBaseUrl "https://github.com/sybila/biodivne-ctl/tree/"
    // BuildInfo.java will be added under this package, in a
    // generated build/ directory.
    packageName "com.github.sybila.biodivine"
}

//travis has some strict RAM restrictions, can't afford to exceed this
tasks.withType(Test) {
    maxHeapSize = "1024m"
    jvmArgs "-Xmx1024m"
}

// bundle settings
mainClassName = "com.github.sybila.biodivine.exe.MainKt"

task abstractionScript(type: CreateStartScripts) {
    mainClassName = "com.github.sybila.biodivine.exe.AbstractionKt"
    applicationName = "tractor"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into("bin") {
    from(abstractionScript)
    fileMode = 0755
}

task combineScript(type: CreateStartScripts) {
    mainClassName = "com.github.sybila.biodivine.exe.CombineKt"
    applicationName = "combine"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into("bin") {
    from(combineScript)
    fileMode = 0755
}